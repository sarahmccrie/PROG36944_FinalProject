Capstone Final Reflection — Enterprise Resource Management System (ERMS)
Project by: Sarah McCrie
Live version deployed with Azure: https://finalproject-erms-mccries.azurewebsites.net/

Overview:
My capstone project is a web application built to help manage employees, projects, and tasks all in one place. It’s developed using ASP.NET Core MVC, Web API, and SQL Server, with everything deployed to Azure for cloud hosting and database management. The system allows users to create accounts, choose their role (Admin, Manager, or Employee), and work with the data through both regular web pages and API endpoints.

I’ve set up role-based access control, so each role has its own permissions and views. Managers and admins can manage employee records, assign tasks, and keep track of project progress. The data is connected through proper relationships in the database, and I’ve built dynamic reports using SQL Server Reporting Services (SSRS) to show task performance and project status.

To monitor the application, I integrated Azure Application Insights, which helps me track errors and performance issues. The whole system runs on Azure App Service and uses Azure SQL Database, so everything stays in the cloud and is easy to manage and scale. Throughout development, I used GitHub for version control to keep track of progress and updates.

Requirements:
1. Project Planning & Documentation (10)
	- Proposal: In Solution folder.
	- ERD: In solution folder
	- Environment: Visual Studio 2022 used as IDE, .NET Core installed, Azure SQL Database created. Deployed with Azure.
	- Version Control: GitHub - https://github.com/sarahmccrie/PROG36944_FinalProject
2. MVC Implementation (20):
	- User Authentication: ASP.NET Identity integrated. Custom Registration allows role selection (Admin / Manager / Employee). Roles enforced in controllers.
	- Employee Management: Full CRUD implemented in EmployeesController.cs. Azure-hosted, available on /Employees page.
	- Project Management: Full CRUD in ProjectsController.cs. Manager assignment via drop-down list.
	- Task Management: Full CRUD in TaskItemsController.cs. Includes priority and status fields.
3. Web API Development & Integration (20)
	- REST API Endpoints: Created for Employees, Projects, and Tasks. Found in API controllers: EmployeesApiController, ProjectsApiController, TaskItemsApiController.
	- CRUD Operations: Supports GET, POST, PUT, DELETE with appropriate routes.
	- API Security: Endpoints secured with ASP.NET Identity authentication. Only authenticated users can perform API actions.
	- Client-Side Consumption: Used HttpClient inside MVC controllers to consume API data. Example: EmployeesController.cs calls API to list employees.
4. Testing & Debugging (15)
	- Unit Testing: Created xUnit tests for MVC controllers. Example test file: EmployeesControllerTests.cs.
	- Mocking & Dependency Injection: Implemented mocking for repositories during testing.
	- Test Coverage: Project includes meaningful test coverage, way over the 5% test coverage (57 passing tests).
5. SQL Server & Reporting (15)
	- Database Design: Normalized tables implemented in Azure SQL Database. Relationships and constraints created successfully.
	- Stored Procedures: Example: GetTasksByStatus procedure implemented.
	- Reporting (SSRS): Created custom reports for employee performance and project progress. .rdl files and pdf copies included in submission
6. Security & Deployment (20)
	- Role-Based Access Control (RBAC): Implemented. Controller actions restricted by roles using [Authorize(Roles = "Admin")], etc.
	- Data Security: EF Core used, preventing SQL Injection. ASP.NET’s built-in anti-forgery tokens protect against CSRF. Input validation in models.
	- Deployment: Published to Azure App Service. Connection string configured to Azure SQL Database. Live version running in cloud environment. 
	- Logging & Monitoring: Implemented application insights




